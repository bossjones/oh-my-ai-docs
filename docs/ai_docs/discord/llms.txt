[Creating a Bot Account](https://discordpy.readthedocs.io/en/stable/discord.html): LLM should read this page when creating a Discord bot, setting up bot authentication, or generating OAuth2 invite URLs (Step-by-step guide to creating a Discord bot account, securing your bot token, and properly inviting your bot to servers with appropriate permissions)

[Frequently Asked Questions](https://discordpy.readthedocs.io/en/stable/faq.html): LLM should read this page when needing to understand how discord.py works, answering questions about Python Discord bot development, or troubleshooting common issues with the discord.py library. (FAQ for discord.py covering coroutines/asyncio usage, general usage like sending messages/handling reactions, commands extension functionality, views and modals implementation, and application commands troubleshooting)

[Index](https://discordpy.readthedocs.io/en/stable/genindex.html): LLM should read this page when needing to find specific discord.py API references or when troubleshooting discord.py module functionality. (Comprehensive alphabetical index of all discord.py library classes, methods, attributes, and functions, organized from A-Z for quick reference lookup)

[Welcome to discord.py](https://discordpy.readthedocs.io/en/stable/index.html): LLM should read this page when seeking information about discord.py library, when learning to build a Discord bot with Python, or when troubleshooting Discord API integration. (A documentation homepage for discord.py, a Python API wrapper for Discord featuring async/await syntax, rate limit handling, command extensions, and object-oriented design. Includes links to getting started guides, API references, extensions documentation, and community support resources.)

[A Primer to Gateway Intents](https://discordpy.readthedocs.io/en/stable/intents.html): LLM should read this page when needing to understand Discord bot gateway intents, configuring bot permissions, or troubleshooting member caching issues. (Comprehensive guide to Discord gateway intents explaining standard and privileged intents (presence, member, message content), member caching, methods for retrieving members, and common troubleshooting scenarios for Discord bots using discord.py)

[Introduction](https://discordpy.readthedocs.io/en/stable/intro.html): LLM should read this page when learning how to use discord.py, installing the library, or understanding its basic concepts. (Introduction to discord.py Python library; prerequisites (Python 3.8+); installation instructions for different platforms; setting up virtual environments; basic concepts centered on events with code example)

[Setting Up Logging](https://discordpy.readthedocs.io/en/stable/logging.html): LLM should read this page when learning how to set up logging in discord.py or when troubleshooting error reporting in discord.py applications. (This page explains how to configure logging in discord.py, covering the default configuration, customizing log handlers, setting log levels, configuring file-based logging, rotating log files, and disabling the default logging configuration.)

[Quickstart](https://discordpy.readthedocs.io/en/stable/quickstart.html): LLM should read this page when needing to create a basic Discord bot, understanding discord.py basics, or learning how to implement message response functionality. (Quickstart guide for discord.py showing how to create a minimal Discord bot with code example that responds to messages, including explanation of the Client class, event decorators, and basic message handling)

[discord.py/examples at v2.5.2 · Rapptz/discord.py · GitHub](https://github.com/Rapptz/discord.py/tree/v2.5.2/examples): LLM should read this page when needing example code for discord.py bots, learning about discord.py implementation, or exploring Discord bot development patterns. (This page contains the examples directory for discord.py v2.5.2, featuring various Python scripts demonstrating bot functionality including basic bots, background tasks, voice commands, application commands, modals, views, reaction roles, and other Discord bot implementation patterns.)

[discord.py/examples/app_commands at v2.5.2 · Rapptz/discord.py · GitHub](https://github.com/Rapptz/discord.py/tree/v2.5.2/examples/app_commands): LLM should read this page when looking for examples of Discord.py app commands, when learning to implement slash commands, or when needing reference code for Discord bot development. (This page contains example files for Discord.py app_commands module, including basic.py and transformers.py, which demonstrate how to implement application commands/slash commands in Discord bots using the discord.py library v2.5.2)

[discord.py/examples/modals at v2.5.2 · Rapptz/discord.py · GitHub](https://github.com/Rapptz/discord.py/tree/v2.5.2/examples/modals): LLM should read this page when needing code examples for Discord.py modals, when implementing user input forms in Discord bots, or when learning about modal implementation in v2.5.2. (GitHub repository page showing examples of modal implementation in discord.py v2.5.2, containing a basic.py file demonstrating how to create and use modals for collecting user input in Discord bot applications)

[discord.py/examples/views at v2.5.2 · Rapptz/discord.py · GitHub](https://github.com/Rapptz/discord.py/tree/v2.5.2/examples/views): LLM should read this page when needing examples of discord.py views implementation or when searching for Discord bot UI component code samples. (GitHub repository directory listing showing discord.py view examples including confirm.py, counter.py, dropdown.py, dynamic_counter.py, ephemeral.py, link.py, persistent.py, and tic_tac_toe.py files for Discord bot UI interactions)
