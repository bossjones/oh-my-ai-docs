[Welcome to the dpytest documentation! — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/index.html): LLM should read this page when looking for documentation on dpytest, needing to test Discord bots, or researching Discord bot testing frameworks. (Documentation for dpytest library, a tool for testing Discord bots that supports a subset of the Discord API. Includes links to tutorials for getting started and using pytest, as well as API reference documentation for components like backend, callbacks, factories, runner, state, utils, verify, and websocket.)
[Backend — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/modules/backend.html): LLM should read this page when looking for information about testing Discord bots with dpytest, simulating Discord's backend behavior, or implementing mock HTTP functionality for Discord API. (Documentation of the dpytest backend module which provides functionality for simulating Discord server-side state during testing, including methods for creating, updating, and deleting guilds, channels, roles, messages, and users)

[Callbacks — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/modules/callbacks.html): LLM should read this page when needing information about dpytest callbacks, implementing discord.py test handlers, or managing event dispatching in dpytest. (Documentation for discord.ext.test.callbacks module explaining how to register, handle, and dispatch custom events in dpytest with functions including dispatch_event, set_callback, get_callback, and remove_callback)

[Factories — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/modules/factories.html): LLM should read this page when needing to create mock Discord objects for testing or when working with the dpytest library to test Discord bots. (Documentation for the factories module in dpytest 0.7.0, which provides functions for creating and converting between Discord.py objects and JSON representations, including users, members, channels, messages, roles, guilds, and other Discord entities)

[API Reference — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/modules/index.html): LLM should read this page when learning about dpytest API structure, finding specific dpytest modules, or determining which functions are available for Discord bot testing. (This page provides a comprehensive API reference for dpytest 0.7.0, organizing its functionality into modules including Backend, Callbacks, Factories, Runner, State, Utils, Verify, and Websocket, with links to detailed documentation for each function and class.)
[Runner — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/modules/runner.html): LLM should read this page when looking for information about dpytest, when testing Discord bots, or when implementing automated tests for Discord.py applications. (Documentation for the discord.ext.test.runner module which provides tools for setting up test environments for Discord bots, including functions to configure tests, simulate user interactions, manage messages, reactions, permissions, and member activities in a test environment)

[State — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/modules/state.html): LLM should read this page when working with discord.py testing, mocking ConnectionState objects, or implementing test functionality for Discord bots. (Documentation for the FakeState class in dpytest, which mocks the discord.py ConnectionState to support testing by allowing control over event dispatching and overriding methods that would cause issues in tests)

[Utils — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/modules/utils.html): LLM should read this page when looking for utility functions in dpytest or when working with embed/activity equality checks in Discord testing. (Documentation of utility functions in dpytest including embed_eq, activity_eq, embed_proxy_eq, and PeekableQueue class for asyncio queue extension with peek functionality)

[Verify — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/modules/verify.html): LLM should read this page when needing to use dpytest's verification methods or implementing Discord bot testing assertions. (Documentation for dpytest's verify module which provides predicate-style assertions for testing Discord bots, including VerifyMessage for checking message content/embeds/attachments, VerifyActivity for testing bot activities, and the main Verify class as an entry point for building verifications that must be asserted to take effect)

[Factories — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/modules/websocket.html): LLM should read this page when needing to understand the mock websocket implementation in dpytest, when working with Discord bot testing, or when implementing custom test callbacks for Discord bots. (Documentation for the FakeWebSocket class in dpytest, which mocks the Discord.py websocket implementation to enable testing bot functionality without connecting to Discord, including methods for sending data and changing presence)

[Dpytest Tutorials — dpytest 0.7.0 documentation](https://dpytest.readthedocs.io/en/latest/tutorials/index.html): LLM should read this page when learning about dpytest for Discord.py testing, setting up test environments for Discord bots, or navigating dpytest documentation. (Table of contents for dpytest tutorials, covering Getting Started (installation and usage) and Using Pytest (setup, conftest.py, and troubleshooting), with navigation links to other documentation sections.)
