# :schema = "https://json.schemastore.org/pyproject.json"

[build-system]
    build-backend = "setuptools.build_meta"
    requires      = ["setuptools>=61"]

[dependency-groups]
    dev = [
        "aiodebug>=2.3.0",
        "aiomonitor>=0.7.1",
        "bpython>=0.25",
        "bump-pydantic>=0.8.0",
        "codetiming>=1.4.0",
        "commitizen>=4.4.1",
        "coverage[toml]>=7.6.12",
        "debugpy>=1.8.12",
        "dpytest>=0.7.0",
        "factory-boy>=3.3.3",
        "griffe-inherited-docstrings>=1.1.1",
        "ipykernel>=6.29.5",
        "ipywidgets>=8.1.5",
        "jedi-language-server>=0.44.0",
        "langchain-tests==0.3.18",
        "markdown-emdash>=0.2.0",
        "memory-profiler>=0.61.0",
        "mkdocs-api-autonav>=0.2.1",
        "mkdocs-awesome-pages-plugin>=2.10.1",
        "mkdocs-coverage>=1.1.0",
        "mkdocs-ezlinks-plugin>=0.1.14",
        "mkdocs-gen-files>=0.5.0",
        "mkdocs-git-authors-plugin>=0.9.4",
        "mkdocs-git-revision-date-localized-plugin>=1.4.5",
        "mkdocs-glightbox>=0.4.0",
        "mkdocs-jupyter>=0.25.1",
        "mkdocs-literate-nav>=0.6.2",
        "mkdocs-macros-plugin>=1.3.7",
        "mkdocs-material>=9.6.6",
        "mkdocs-mermaid2-plugin>=1.2.1",
        "mkdocs-open-in-new-tab>=1.0.8",
        "mkdocs-section-index>=0.3.9",
        "mkdocs-towncrier>=0.1.4",
        "mkdocs>=1.6.1",
        "mkdocstrings[python]>=0.29.1",
        "nbconvert>=7.16.6",
        "nbqa>=1.9.1",
        "neoteroi-mkdocs>=1.1.0",
        "notebook>=7.3.3",
        "pdoc>=15.0.1",
        "pre-commit>=4.1.0",
        "pydocstyle>=6.3.0",
        "pygments>=2.19.1",
        "pyinspect>=0.1.0",
        "pyinstrument>=5.0.1",
        "pylint-per-file-ignores>=1.4.0",
        "pylint-pydantic>=0.3.5",
        "pyright>=1.1.395",
        "pytest-aiohttp>=1.1.0",
        "pytest-aioresponses>=0.3.0",
        "pytest-asyncio>=0.25.3",
        "pytest-clarity>=1.0.1",
        "pytest-cov>=6.0.0",
        "pytest-freezegun",
        "pytest-httpx>=0.35.0",
        "pytest-ignore-flaky>=2.2.1",
        "pytest-memray>=1.7.0",
        "pytest-mock>=3.14.0",
        "pytest-recording>=0.13.2",
        "pytest-retry>=1.7.0",
        "pytest-skip-slow>=0.0.5",
        "pytest-skipuntil>=0.2.0",
        "pytest-sugar>=1.0.0",
        "pytest-timeout>=2.2.0",
        "pytest>=8.3.4",
        "pyupgrade>=3.19.1",
        "requests-mock>=1.12.1",
        "respx>=0.22.0",
        "ruff>=0.9.9",
        "rust-just>=1.40.0",
        "towncrier>=24.8.0",
        "tox-uv>=1.25.0",
        "types-aiofiles>=24.1.0.20241221",
        "types-beautifulsoup4>=4.12.0.20250204",
        "types-mock>=5.1.0.20240425",
        "types-requests>=2.32.0.20250301",
        "validate-pyproject[all,store]>=0.23",
        "watchdog[watchmedo]>=6.0.0",
        "widgetsnbextension>=4.0.13",
    ]

[project]
    authors = [
        { email = "bossjones@theblacktonystark.com", name = "Malcolm Jones" },
    ]
    dependencies = [
        "aiofiles>=24.1.0",
        "anthropic>=0.49.0",
        "asyncer>=0.0.8",
        "better-exceptions>=0.3.3",
        "bpython>=0.25",
        "bson>=0.5.10",
        "docutils>=0.21.2",
        "fastapi>=0.115.12",
        "fastparquet>=2024.11.0",
        "files-to-prompt>=0.4",
        "langchain-anthropic>=0.3.10",
        "langchain-community>=0.3.21",
        "langchain-core>=0.3.51",
        "langchain-openai>=0.3.12",
        "langchain>=0.3.23",
        "langgraph-cli[inmem]>=0.2.3",
        "langgraph>=0.3.29",
        "langsmith>=0.3.30",
        "llmstxt-architect>=0.6.1",
        "logging-tree>=1.10",
        "loguru>=0.7.3",
        "mcp[cli]>=1.3.0",
        "openevals>=0.0.18",
        "pyarrow>=19.0.1",
        "pydantic-settings>=2.8.1",
        "pydantic[email]>=2.11.2",
        "pysnooper>=1.2.1",
        "python-dotenv>=1.1.0",
        "python-json-logger>=3.3.0",
        "python-multipart>=0.0.20",
        "rich>=13.9.4",
        "scikit-learn>=1.6.1",
        "seaborn>=0.13.2",
        "tenacity>=9.0.0",
        "tqdm>=4.67.1",
        "ttok>=0.3",
        "typer>=0.15.2",
        "typing-extensions>=4.13.2",
        "tzlocal>=5.2",
        "uritemplate>=4.1.1",
        "uritools>=4.0.3",
    ]
    description = "Repo to house a bunch of llms.txt files for different projects I like to use"
    keywords = ["ai", "ai-docs", "ai_docs", "oh-my-ai-docs"]
    license = { file = "LICENSE.txt" }
    name = "oh-my-ai-docs"
    readme = "README.md"
    requires-python = ">=3.12"
    version = "0.2.0"

    [project.scripts]
        goobctl = 'oh_my_ai_docs.cli:entry'

    [project.urls]
        "Bug Tracker"   = "https://github.com/bossjones/oh-my-ai-docs/issues"
        Changelog       = "https://github.com/bossjones/oh-my-ai-docs/blob/main/CHANGELOG.md"
        "Code"          = "https://github.com/bossjones/oh-my-ai-docs"
        Documentation   = "https://bossjones.github.io/oh-my-ai-docs/oh_my_ai_docs.html"
        Homepage        = "https://github.com/bossjones/oh-my-ai-docs"
        "Issue tracker" = "https://github.com/bossjones/oh-my-ai-docs/issues"
        Repository      = "https://github.com/bossjones/oh-my-ai-docs"

[tool.setuptools]
    package-dir = { "" = "src" }
    packages    = ["oh_my_ai_docs"]

[tool.changelog-bot]

    [tool.changelog-bot.towncrier_changelog]
        changelog_skip_label = "no-changelog-entry-needed"
        enabled              = true
        verify_pr_number     = true

# SOURCE: https://github.com/fmind/mlops-python-package/blob/2a9741f0f97e2213aafb9f3e9bb5b0a9092738cd/pyproject.toml
[tool.commitizen]
    # Indicates the commit from which to start generating the changelog.
    changelog_start_rev = "v0.1.0"
    # Specifies the commitizen plugin to use for creating conventional commits.
    name = "cz_conventional_commits"
    # Defines the format for version tags (e.g., v1.2.3).
    tag_format = "v$version"
    # Automatically update the changelog file on version bumps.
    update_changelog_on_bump = true
    # Specifies that the version is defined in pyproject.toml as per PEP 621.
    version_provider = "pep621"
    # Declares the versioning scheme to be compliant with PEP 440.
    version_scheme = "pep440"

[tool.coverage.html]
    directory = "htmlcov"

[tool.coverage.paths]
    # The first path is the path on the local filesystem
    # The second path is the path as it appears within the Docker container
    source = ["/usr/src/python-app", "src/"]

[tool.coverage.report]
    # Additional regexes for lines to exclude from consideration
    exclude_also = [
        # Don't complain about abstract methods, they aren't run:
        "@(abc\\.)?abstractmethod",
        # A pragma comment that excludes an entire file:
        "\\A(?s:.*# pragma: exclude file.*)\\Z",
        # Don't complain about missing debug-only code:
        "def __repr__",
        # Exclude specific exception clauses:
        "except ValueError:\\n\\s*assume\\(False\\)",
        # Don't complain if non-runnable code isn't run:
        "if 0:",
        "if __name__ == .__main__.:",
        "if self\\.debug",
        # Comments to turn coverage on and off:
        "no cover: start(?s:.)*?no cover: stop",
        # Don't complain if tests don't hit defensive assertion code:
        "raise AssertionError",
        "raise NotImplementedError",
    ]
    exclude_lines = [
        "@(abc.)?abstractmethod",
        "@overload",
        "@typing.overload",
        "assert_never",
        "def __repr__",
        "def __str__",
        "except ImportError:",
        "if TYPE_CHECKING",
        "if TYPE_CHECKING:",
        "if __name__ == .__main__.:",
        "if not _PANDAS_AVAILABLE:",
        "if self.debug",
        "if settings.DEBUG",
        "if typing.TYPE_CHECKING:",
        "pragma: $TEST_PLATFORM no cover",
        "pragma: no cover",
        "pragma: py$PYTHON_VERSION no cover",
        "raise AssertionError",
        "raise NotImplementedError",
        "return NotImplemented",
        "typing.assert_never",
        '\(Protocol\):$',
        '\s*\.\.\.$',
    ]
    # fail_under = 30
    # Ignore source code that can't be found, emitting a warning instead of an exception
    ignore_errors = false
    omit          = ["*/studio/*", "*/test/*", "*/tests/*"]
    # When running a summary report, show missing lines
    show_missing = true
    # Don't report files that are 100% covered
    skip_covered = false
    skip_empty   = true

# ===========================[ COVERAGE CONFIGURATION ]========================
[tool.coverage.run]
    branch         = true
    concurrency    = ["greenlet", "multiprocessing", "thread"]
    data_file      = ".coverage"
    parallel       = true
    relative_files = true
    source         = ["src"]

[tool.coverage.xml]
    output = "cov.xml"

[tool.pytest]

    [tool.pytest.ini_options]
        addopts = [
            '--cov-branch',
            '--cov-report=annotate:cov_annotate',
            '--cov-report=html:htmlcov',
            '--cov-report=term-missing',
            '--cov-report=xml:cov.xml',
            # Coverage reporting options
            '--cov=src',
            '--durations-min=0.05',
            # Print runtimes of the slowest tests.
            '--durations=10',
            '--junitxml=junit/test-results.xml',
            # Timeout settings
            '--timeout=600',
            '--timeout_method=thread',
        ]
        asyncio_default_fixture_loop_scope = "function"
        asyncio_mode = "auto"
        # Test timeouts
        filterwarnings = [
            "default::DeprecationWarning:democracy_exe.*:",
            "default::pydantic.warnings.PydanticDeprecatedSince20:democracy_exe.*:",
            "ignore::DeprecationWarning:.venv.*:",
            "ignore::DeprecationWarning:audioop:",
            "ignore::DeprecationWarning:discord.*:",
            "ignore::ResourceWarning:aiohttp",
            "ignore::ResourceWarning:anyio.abc",
            "ignore::ResourceWarning:anyio.streams.memory",
            "ignore::ResourceWarning:anyio.streams.stapled",
            "ignore::ResourceWarning:asyncio",
            "ignore::ResourceWarning:pytest_asyncio",
            "ignore::pydantic.warnings.PydanticDeprecatedSince20:.venv.*:",
            "ignore::pydantic.warnings.PydanticDeprecatedSince20:fireworks.*:",
            "ignore::pydantic.warnings.PydanticDeprecatedSince20:pydantic.*:",
            'ignore:configuration option "asyncio_default_fixture_loop_scope" is unset',
        ]
        log_cli = false
        log_cli_date_format = "%Y-%m-%d %H:%M:%S"
        timeout = 30 # Default timeout in seconds for all tests
        timeout_method = "thread" # Use thread-based timeout (more reliable than signal-based)
        # log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
        # log_cli_format = "%(asctime)s [%(levelname)8s] %(module)s.%(funcName)s:%(lineno)d - %(message)s"
        log_cli_format = "%(asctime)s [%(levelname)8s] [%(threadName)s] %(name)s - %(module)s.%(funcName)s (%(filename)s:%(lineno)d) - %(message)s"
        log_cli_level  = "DEBUG"
        # Enable live logging to a file when needed (very useful when debugging evals)
        log_file = "pytest-accuracy-debug.log"
        log_file_date_format = "%Y-%m-%d %H:%M:%S"
        log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
        log_file_level = "DEBUG"
        markers = [
            "agenticonly: marks tests that run code that utilizes the agentic module (deselect with '-m \"not agenticonly\"')",
            "aidergenerated: marks tests that are aider generated (deselect with '-m \"not aidergenerated\"')",
            "anyio: marks tests that run code that utilizes the anyio module (deselect with '-m \"not anyio\"')",
            "asynciotyper: marks tests that are asyncio typer generated (deselect with '-m \"not asynciotyper\"')",
            "chatbotonly: marks tests that run code that utilizes the chatbot module (deselect with '-m \"not chatbotonly\"')",
            "cli: marks tests that are cli generated (deselect with '-m \"not cli\"')",
            "cogs: marks tests that run code that utilizes the cogs module (deselect with '-m \"not cogs\"')",
            "configonly: marks tests that run code that utilizes the config module (deselect with '-m \"not configonly\"')",
            "cursorgenerated: marks tests that are cursor generated (deselect with '-m \"not cursorgenerated\"')",
            "discordonly: marks tests that run code that belongs to the discordonly calls at end of pytest run module  (deselect with '-m \"not discordonly\"')",
            "dropboxonly: marks tests that run code that utilizes the dropbox module (deselect with '-m \"not dropboxonly\"')",
            "e2e: marks tests dealing with e2e testing (deselect with '-m \"not e2e\"')",
            "evals: marks tests as evals (run with '-m evals')",
            "fast: marks tests as fast (run with '-m fast')",
            "fastmcp_basic: marks tests that verify basic FastMCP server functionality including server creation, Unicode support, and decorator usage (deselect with '-m \"not fastmcp_basic\"')",
            "fastmcp_context: marks tests that verify FastMCP context functionality including context injection, async support, logging, and resource access (deselect with '-m \"not fastmcp_context\"')",
            "fastmcp_lifespan: marks tests that verify FastMCP lifespan functionality including basic operations, error handling, and content type handling (deselect with '-m \"not fastmcp_lifespan\"')",
            "fastmcp_prompts: marks tests that verify FastMCP prompt functionality including registration, configuration, management, and execution (deselect with '-m \"not fastmcp_prompts\"')",
            "fastmcp_resources: marks tests that verify FastMCP resource functionality including text/binary resources, file resources, and resource templates (deselect with '-m \"not fastmcp_resources\"')",
            "fastmcp_tools: marks tests that verify FastMCP tool functionality including basic operations, error handling, and content type handling (deselect with '-m \"not fastmcp_tools\"')",
            "fastmcp_vectorstore: marks tests that verify FastMCP vectorstore functionality including basic operations, error handling, and content type handling (deselect with '-m \"not fastmcp_vectorstore\"')",
            "gallerydlonly: marks tests that run code that utilizes the gallery-dl module (deselect with '-m \"not gallerydlonly\"')",
            "httpclientonly: marks tests that run code that utilizes the http_client module (deselect with '-m \"not httpclientonly\"')",
            "imgops: marks tests as imgops (run with '-m imgops')",
            "integration: marks tests dealing with integration testing (deselect with '-m \"not integration\"')",
            "langchain_chat_model_integration: marks tests that implement integration tests for LangChain chat model components (deselect with '-m \"not langchain_chat_model_integration\"')",
            "langchain_chat_model_unit: marks tests that implement unit tests for LangChain chat model components (deselect with '-m \"not langchain_chat_model_unit\"')",
            "langchain_embeddings_integration: marks tests that implement integration tests for LangChain embedding components (deselect with '-m \"not langchain_embeddings_integration\"')",
            "langchain_embeddings_unit: marks tests that implement unit tests for LangChain embedding components (deselect with '-m \"not langchain_embeddings_unit\"')",
            "langchain_retrievers_integration: marks tests that implement integration tests for LangChain retriever components (deselect with '-m \"not langchain_retrievers_integration\"')",
            "langchain_retrievers_unit: marks tests that implement unit tests for LangChain retriever components (deselect with '-m \"not langchain_retrievers_unit\"')",
            "langchain_tool_integration: marks tests that implement integration tests for LangChain tool components (deselect with '-m \"not langchain_tool_integration\"')",
            "langchain_tool_unit: marks tests that implement unit tests for LangChain tool components (deselect with '-m \"not langchain_tool_unit\"')",
            "langchain_vectorstore_integration: marks tests that implement integration tests for LangChain vector store components (deselect with '-m \"not langchain_vectorstore_integration\"')",
            "langchain_vectorstore_unit: marks tests that implement unit tests for LangChain vector store components (deselect with '-m \"not langchain_vectorstore_unit\"')",
            "logsonly: marks tests that run code that utilizes the logs module (deselect with '-m \"not logsonly\"')",
            "onboardingonly: marks tests that run code that utilizes the new_dev_onboarding_tool module (deselect with '-m \"not onboardingonly\"')",
            "pgvectoronly: marks tests that run code that utilizes the pgvector module (deselect with '-m \"not pgvectoronly\"')",
            "retryonly: marks tests that run code that utilizes the retry module (deselect with '-m \"not retryonly\"')",
            "services: marks tests that run code that belongs to the services module  (deselect with '-m \"not services\"')",
            "skip_in_parallel: marks tests that should be run in serial only (deselect with '-m \"not skip_in_parallel\"')",
            "slow: marks tests as slow (run with '-m slow')",
            "slower: marks tests that run code that belongs to the slower calls at end of pytest run module  (deselect with '-m \"not slower\"')",
            "toolonly: marks tests that run code that utilizes a Custom Langchain tool module in the tools directory (deselect with '-m \"not toolonly\"')",
            "unittest: marks tests dealing with unittest (deselect with '-m \"not unittest\"')",
            "utilsonly: marks tests that run code that utilizes any utils module (deselect with '-m \"not utilsonly\"')",
            "vcrcanary: marks tests that run code that utilizes the vcr test canary module (deselect with '-m \"not vcrcanary\"')",
            "vcronly: marks tests that run code that utilizes the vcr module (deselect with '-m \"not vcronly\"')",
            "vectorstore: marks tests that use or interact with vectorstore components like SKLearnVectorStore (deselect with '-m \"not vectorstore\"')",
            "vectorstoronly: marks tests that run code that utilizes the flex_vector_store_tool module (deselect with '-m \"not vectorstoronly\"')",
            "visiontoolonly: marks tests that run code that utilizes vision_tool.py (deselect with '-m \"not visiontoolonly\"')",
            "webpagetoolonly: marks tests that run code that utilizes the fetch_webpage_tool module (deselect with '-m \"not webpagetoolonly\"')",
        ]
        pythonpath = "."
        testpaths = ["tests"]

# Basic settings
[tool.ruff]
    exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".git-rewrite",
        ".hg",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "contrib/",
        "dist",
        "node_modules",
        "tests",
        "venv",
    ]
    include = ["*.ipynb", "*.py", "*.pyi"]
    line-length = 120
    src = ["packages", "src", "tests"]
    target-version = "py312"

    [tool.ruff.format]
        docstring-code-format = true

    # Linting settings
    [tool.ruff.lint]
        dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
        ignore = [
            # Existing ignores
            "B008",
            "B904",
            "C901",
            # New ignores from errors
            "D100",
            "D103",
            "D104",
            "D107",
            "D200",
            "D203",
            "D205",
            "D211",
            "D212",
            "D213",
            "D400",
            "D401",
            "D413",
            "D415",
            "D417",
            "E501",
            "E722",
            "F401",
            "F841",
            "N812",
            "PGH003",
            "RUF013",
            "RUF015",
            "RUF022",
            "S101",
            "S110",
            "S603",
            "S607",
            "SIM102",
            "SIM103",
            "SIM108",
            "SIM118",
            "UP006",
            "UP007",
            "UP035",
        ]
        # Existing configuration
        select = [
            "A",
            "B",
            "C4",
            "C90",
            "D",
            "E",
            "F",
            "I",
            "PGH",
            "RUF",
            "S",
            "SIM",
            "T10",
            "TID252",
            "UP",
            "W",
            "YTT",
        ]

        # Add per-file configurations
        [tool.ruff.lint.per-file-ignores]
            # Init files
            "**/__init__.py"    = ["D104", "F401"]
            "**/__version__.py" = ["D104", "F401", "RUF"]
            # Server/complex files
            "**/fserver.py" = ["C901", "D200", "D205", "D400", "D415"]
            # Template handling
            "**/import_templates.py" = ["C901", "D401"]
            # Repository analysis
            "**/repository_analyzer.py" = ["C901", "SIM102"]
            "**/server.py" = ["B904", "PGH003"]
            "contrib/**" = ["D103", "E702", "RUF"]
            "doc/**" = ["A001", "C408", "UP031"]
            "scripts/**" = [
                "A001",
                "C408",
                "D",
                "D103",
                "PGH004",
                "RUF005",
                "UP031",
                "UP038",
            ]
            "src/**" = [
                "A001",
                "A002",
                "A004",
                "B006",
                "B007",
                "B018",
                "B026",
                "B904",
                "C408",
                "C416",
                "C417",
                "C901",
                "D101",
                "D102",
                "D103",
                "D105",
                "D106",
                "D200",
                "D205",
                "D301",
                "D400",
                "D401",
                "D415",
                "E402",
                "E702",
                "E711",
                "E721",
                "E731",
                "E741",
                "F403",
                "F405",
                "F811",
                "F821",
                "PGH003",
                "PGH004",
                "RUF002",
                "RUF005",
                "RUF006",
                "RUF008",
                "RUF012",
                "RUF046",
                "RUF100",
                "S105",
                "S108",
                "S113",
                "S311",
                "S324",
                "S602",
                "S605",
                "SIM101",
                "SIM102",
                "SIM110",
                "SIM115",
                "SIM116",
                "SIM117",
                "SIM222",
                "T100",
                "TID252",
                "UP031",
                "UP038",
                "UP040",
                "YTT201",
            ]
            "src/oh_my_ai_docs/downloaders/**" = [
                "D103",
                "E702",
                "RUF",
                "SIM105",
            ]

        [tool.ruff.lint.pydocstyle]
            convention = "google"

        # Add banned-imports rule
        [tool.ruff.lint.flake8-import-conventions]
            banned-from = ["unittest", "unittest.mock"]

        [tool.ruff.lint.isort]
            required-imports = ["from __future__ import annotations"]
        [tool.ruff.lint.pyupgrade]
            # Preserve types, even if a file imports `from __future__ import annotations`.
            keep-runtime-typing = true

[tool.tomlsort]
    all = true
    ignore_case = true
    sort_first = [
        "build-system",
        "dependency-groups",
        "project",
        "project.scripts",
        "project.urls",
        "tool.setuptools",
        "tool.uv.sources",
        "tool.uv.workspace",
    ]
    sort_inline_arrays = false
    sort_inline_tables = false
    sort_table_keys = false
    spaces_before_inline_comment = 2
    spaces_indent_inline_array = 4
    trailing_comma_inline_array = true

[tool.towncrier]
    # Add the filename option extension to news fragment files created with towncrier create
    create_add_extension = true
    # File handling configuration
    # Ensure the content of a news fragment file created with towncrier create ends with an empty line
    create_eof_newline = true
    # The directory storing your news fragments
    directory = "changes/"
    # The filename of your news file
    filename = "CHANGELOG.md"
    # A case-insensitive list of filenames in the news fragments directory to ignore
    ignore = [
        ".gitignore",
        ".gitkeep",
        ".keep",
        ".template.md.jinja",
        "README",
        "README.md",
        "README.rst",
        "simple.md.jinja",
        "towncrier_template.md.jinja",
        "towncrier_template_from_hikari.md.jinja",
    ]
    # Format string for rendering the issue/ticket number in newsfiles
    issue_format = "[#{issue}](https://github.com/bossjones/oh-my-ai-docs/pull/{issue})"
    # Validation and ignore patterns
    # Ensure the issue name matches a certain regex pattern (digit-only file names in this case)
    issue_pattern = "\\d+"          # Only allow numeric issue IDs
    name          = "oh_my_ai_docs"
    # The Python package name of your project - allows name and version to be automatically determined
    package = "oh_my_ai_docs"
    # The magic string that towncrier looks for when considering where the release notes should start
    start_string = "<!-- towncrier release notes start -->\n"
    # Path to the template for generating the news file
    # template = "changes/.template.md.jinja"
    # template = "changes/towncrier_template.md.jinja"
    template = "changes/towncrier_template_from_hikari.md.jinja"
    # Format string for the title of your project, using {name}, {version}, and {project_date}
    # title_format = "## [{version}](https://github.com/bossjones/oh-my-ai-docs/tree/{version}) - {project_date}"
    # The characters used for underlining headers (empty strings mean no underlining)
    # underlines = ["", "", ""]
    underlines = [2, 3]

    [[tool.towncrier.section]]
        path = ""

    # The order of entries matters! It controls the order in which changelog sections are displayed.
    # https://towncrier.readthedocs.io/en/stable/configuration.html#use-a-toml-array-defined-order
    # # Custom fragment types using TOML array for defined order
    [[tool.towncrier.type]]
        # A boolean value indicating whether the fragment should be considered by the towncrier check command.
        check = true
        # The type / category of the fragment.
        directory = "breaking"
        # The description of the fragment type, as it must be included in the news file.
        name = "Breaking Changes"
        # A boolean value indicating whether the fragment contents should be included in the news file.
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "feat"
        name        = "Features"
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "fix"
        name        = "Bug Fixes"
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "docs"
        name        = "Documentation"
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "chore"
        name        = "Chores"
        showcontent = false

    [[tool.towncrier.type]]
        check       = true
        directory   = "refactor"
        name        = "Code Refactoring"
        showcontent = false

    [[tool.towncrier.type]]
        check       = true
        directory   = "perf"
        name        = "Performance Improvements"
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "ci"
        name        = "CI/CD Improvements"
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "deps"
        name        = "Dependencies"
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "security"
        name        = "Security"
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "test"
        name        = "Testing"
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "style"
        name        = "Code Style"
        showcontent = true

    [[tool.towncrier.type]]
        check       = true
        directory   = "build"
        name        = "Build System"
        showcontent = true

[tool.uv.sources]
    cursor-rules-mcp-server = { workspace = true }
    pytest-freezegun        = { git = "https://github.com/bossjones/pytest-freezegun" }
